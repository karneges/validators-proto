// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: collectionExtractorService/collectionExtractorService.proto

package collectionExtractorService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectionExtractorServiceClient is the client API for CollectionExtractorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionExtractorServiceClient interface {
	GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error)
	GetMarketData(ctx context.Context, in *GetMarketDataRequest, opts ...grpc.CallOption) (*GetMarketDataResponse, error)
}

type collectionExtractorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionExtractorServiceClient(cc grpc.ClientConnInterface) CollectionExtractorServiceClient {
	return &collectionExtractorServiceClient{cc}
}

func (c *collectionExtractorServiceClient) GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error) {
	out := new(GetCollectionResponse)
	err := c.cc.Invoke(ctx, "/collectionExtractorService.CollectionExtractorService/GetCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionExtractorServiceClient) GetMarketData(ctx context.Context, in *GetMarketDataRequest, opts ...grpc.CallOption) (*GetMarketDataResponse, error) {
	out := new(GetMarketDataResponse)
	err := c.cc.Invoke(ctx, "/collectionExtractorService.CollectionExtractorService/GetMarketData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionExtractorServiceServer is the server API for CollectionExtractorService service.
// All implementations must embed UnimplementedCollectionExtractorServiceServer
// for forward compatibility
type CollectionExtractorServiceServer interface {
	GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error)
	GetMarketData(context.Context, *GetMarketDataRequest) (*GetMarketDataResponse, error)
	mustEmbedUnimplementedCollectionExtractorServiceServer()
}

// UnimplementedCollectionExtractorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollectionExtractorServiceServer struct {
}

func (UnimplementedCollectionExtractorServiceServer) GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedCollectionExtractorServiceServer) GetMarketData(context.Context, *GetMarketDataRequest) (*GetMarketDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketData not implemented")
}
func (UnimplementedCollectionExtractorServiceServer) mustEmbedUnimplementedCollectionExtractorServiceServer() {
}

// UnsafeCollectionExtractorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionExtractorServiceServer will
// result in compilation errors.
type UnsafeCollectionExtractorServiceServer interface {
	mustEmbedUnimplementedCollectionExtractorServiceServer()
}

func RegisterCollectionExtractorServiceServer(s grpc.ServiceRegistrar, srv CollectionExtractorServiceServer) {
	s.RegisterService(&CollectionExtractorService_ServiceDesc, srv)
}

func _CollectionExtractorService_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionExtractorServiceServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collectionExtractorService.CollectionExtractorService/GetCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionExtractorServiceServer).GetCollection(ctx, req.(*GetCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionExtractorService_GetMarketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionExtractorServiceServer).GetMarketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collectionExtractorService.CollectionExtractorService/GetMarketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionExtractorServiceServer).GetMarketData(ctx, req.(*GetMarketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectionExtractorService_ServiceDesc is the grpc.ServiceDesc for CollectionExtractorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionExtractorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collectionExtractorService.CollectionExtractorService",
	HandlerType: (*CollectionExtractorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCollection",
			Handler:    _CollectionExtractorService_GetCollection_Handler,
		},
		{
			MethodName: "GetMarketData",
			Handler:    _CollectionExtractorService_GetMarketData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collectionExtractorService/collectionExtractorService.proto",
}
