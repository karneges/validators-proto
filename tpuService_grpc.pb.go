// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: tpuService.proto

package tpuService

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TpuServiceClient is the client API for TpuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TpuServiceClient interface {
	GetTpuByCountry(ctx context.Context, in *GetTpuByCountry, opts ...grpc.CallOption) (*Validators, error)
	GetTopTpu(ctx context.Context, in *GetTopTpu, opts ...grpc.CallOption) (*Validators, error)
	GetValidatorsMap(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ValidatorsMap, error)
}

type tpuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTpuServiceClient(cc grpc.ClientConnInterface) TpuServiceClient {
	return &tpuServiceClient{cc}
}

func (c *tpuServiceClient) GetTpuByCountry(ctx context.Context, in *GetTpuByCountry, opts ...grpc.CallOption) (*Validators, error) {
	out := new(Validators)
	err := c.cc.Invoke(ctx, "/tpuService.TpuService/getTpuByCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuServiceClient) GetTopTpu(ctx context.Context, in *GetTopTpu, opts ...grpc.CallOption) (*Validators, error) {
	out := new(Validators)
	err := c.cc.Invoke(ctx, "/tpuService.TpuService/getTopTpu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuServiceClient) GetValidatorsMap(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ValidatorsMap, error) {
	out := new(ValidatorsMap)
	err := c.cc.Invoke(ctx, "/tpuService.TpuService/getValidatorsMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TpuServiceServer is the server API for TpuService service.
// All implementations must embed UnimplementedTpuServiceServer
// for forward compatibility
type TpuServiceServer interface {
	GetTpuByCountry(context.Context, *GetTpuByCountry) (*Validators, error)
	GetTopTpu(context.Context, *GetTopTpu) (*Validators, error)
	GetValidatorsMap(context.Context, *empty.Empty) (*ValidatorsMap, error)
	mustEmbedUnimplementedTpuServiceServer()
}

// UnimplementedTpuServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTpuServiceServer struct {
}

func (UnimplementedTpuServiceServer) GetTpuByCountry(context.Context, *GetTpuByCountry) (*Validators, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTpuByCountry not implemented")
}
func (UnimplementedTpuServiceServer) GetTopTpu(context.Context, *GetTopTpu) (*Validators, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopTpu not implemented")
}
func (UnimplementedTpuServiceServer) GetValidatorsMap(context.Context, *empty.Empty) (*ValidatorsMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorsMap not implemented")
}
func (UnimplementedTpuServiceServer) mustEmbedUnimplementedTpuServiceServer() {}

// UnsafeTpuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TpuServiceServer will
// result in compilation errors.
type UnsafeTpuServiceServer interface {
	mustEmbedUnimplementedTpuServiceServer()
}

func RegisterTpuServiceServer(s grpc.ServiceRegistrar, srv TpuServiceServer) {
	s.RegisterService(&TpuService_ServiceDesc, srv)
}

func _TpuService_GetTpuByCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTpuByCountry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServiceServer).GetTpuByCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpuService.TpuService/getTpuByCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServiceServer).GetTpuByCountry(ctx, req.(*GetTpuByCountry))
	}
	return interceptor(ctx, in, info, handler)
}

func _TpuService_GetTopTpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopTpu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServiceServer).GetTopTpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpuService.TpuService/getTopTpu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServiceServer).GetTopTpu(ctx, req.(*GetTopTpu))
	}
	return interceptor(ctx, in, info, handler)
}

func _TpuService_GetValidatorsMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServiceServer).GetValidatorsMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpuService.TpuService/getValidatorsMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServiceServer).GetValidatorsMap(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TpuService_ServiceDesc is the grpc.ServiceDesc for TpuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TpuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tpuService.TpuService",
	HandlerType: (*TpuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getTpuByCountry",
			Handler:    _TpuService_GetTpuByCountry_Handler,
		},
		{
			MethodName: "getTopTpu",
			Handler:    _TpuService_GetTopTpu_Handler,
		},
		{
			MethodName: "getValidatorsMap",
			Handler:    _TpuService_GetValidatorsMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tpuService.proto",
}
